import 'package:flutter/material.dart';
import 'dart:math' as math;

class PersonalityChart extends StatefulWidget {
  final double warmth;
  final double competence;
  final double extroversion;
  final double creativity;
  final double humour;
  final double reliability;
  final Map<String, dynamic>? realtimeSettings;
  final List<String>? attractiveFlaws;
  final List<String>? contradictions;
  final String? communicationPrompt;
  // üÜï AI ÏÉùÏÑ± Ï∂îÍ∞Ä ÌïÑÎìúÎì§
  final List<String>? coreTraits;
  final String? personalityDescription;

  const PersonalityChart({
    super.key,
    required this.warmth,
    required this.competence,
    required this.extroversion,
    this.creativity = 50,
    this.humour = 75,
    this.reliability = 50,
    this.realtimeSettings,
    this.attractiveFlaws,
    this.contradictions,
    this.communicationPrompt,
    // üÜï AI ÏÉùÏÑ± Ï∂îÍ∞Ä ÌïÑÎìúÎì§
    this.coreTraits,
    this.personalityDescription,
  });

  @override
  State<PersonalityChart> createState() => _PersonalityChartState();
}

class _PersonalityChartState extends State<PersonalityChart> {
  String? selectedLabel;
  double? selectedValue;
  Offset? tooltipPosition;

  @override
  Widget build(BuildContext context) {
    final values = [
      widget.warmth,
      widget.competence,
      widget.extroversion,
      widget.creativity,
      widget.humour,
      widget.reliability,
    ];
    final labels = ['Ïò®Í∏∞', 'Îä•Î†•', 'Ïô∏Ìñ•ÏÑ±', 'Ï∞ΩÏùòÏÑ±', 'Ïú†Î®∏', 'Ïã†Î¢∞ÏÑ±'];

    return Column(
      crossAxisAlignment: CrossAxisAlignment.center,
      children: [
        const SizedBox(height: 15),

        const Text(
          'ÏÑ±Í≤© Ï∞®Ìä∏',
          style: TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: Colors.black,
          ),
        ),

        const SizedBox(height: 30),

        // ÌÑ∞Ïπò Í∞ÄÎä•Ìïú Ï∞®Ìä∏
        Stack(
          clipBehavior: Clip.none,
          children: [
            GestureDetector(
              onTapDown: (details) {
                _handleChartTap(details.localPosition, values, labels);
              },
              child: SizedBox(
                height: 280,
                width: 280,
                child: CustomPaint(
                  size: const Size(280, 280),
                  painter: RadarChartPainter(values: values, labels: labels),
                ),
              ),
            ),

            // Ìà¥ÌåÅ ÌëúÏãú
            if (selectedLabel != null && tooltipPosition != null)
              Positioned(
                left: (tooltipPosition!.dx - 70).clamp(0.0, 140.0),
                top: (tooltipPosition!.dy - 100).clamp(-50.0, 100.0),
                child: Material(
                  elevation: 10,
                  borderRadius: BorderRadius.circular(12),
                  child: Container(
                    width: 140,
                    padding: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 12,
                    ),
                    decoration: BoxDecoration(
                      color: Colors.black.withOpacity(0.9),
                      borderRadius: BorderRadius.circular(12),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.3),
                          blurRadius: 8,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text(
                          selectedLabel!,
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 14,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          '${selectedValue!.toInt()}Ï†ê',
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 6),
                        Text(
                          _getPersonalityDescription(selectedLabel!),
                          style: const TextStyle(
                            color: Colors.white70,
                            fontSize: 11,
                            height: 1.3,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                ),
              ),
          ],
        ),

        const SizedBox(height: 30),

        Container(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          decoration: BoxDecoration(
            color: const Color(0xFFFA9121),
            borderRadius: BorderRadius.circular(20),
          ),
          child: const Text(
            'Ï∞®Ìä∏Î•º ÌÑ∞ÏπòÌï¥ÏÑú ÏàòÏπòÎ•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî',
            style: TextStyle(
              fontSize: 14,
              color: Colors.white,
              fontWeight: FontWeight.w500,
            ),
          ),
        ),

        const SizedBox(height: 40),

        // ÏÑ±Í≤© ÏÑ§Î™Ö ÏÑπÏÖòÎì§
        _buildPersonalityDescription(),

        const SizedBox(height: 30),
      ],
    );
  }

  void _handleChartTap(
    Offset localPosition,
    List<double> values,
    List<String> labels,
  ) {
    final center = const Offset(140, 140);
    final radius = 90;

    final dx = localPosition.dx - center.dx;
    final dy = localPosition.dy - center.dy;
    final distance = math.sqrt(dx * dx + dy * dy);

    if (distance > radius + 30) return;

    var angle = math.atan2(dy, dx);
    angle = (angle + math.pi / 2) % (2 * math.pi);
    if (angle < 0) angle += 2 * math.pi;

    final sectionAngle = 2 * math.pi / 6;
    int sectionIndex = ((angle + sectionAngle / 2) / sectionAngle).floor() % 6;

    setState(() {
      selectedLabel = labels[sectionIndex];
      selectedValue = values[sectionIndex];
      tooltipPosition = localPosition;
    });

    Future.delayed(const Duration(seconds: 3), () {
      if (mounted) {
        setState(() {
          selectedLabel = null;
          selectedValue = null;
          tooltipPosition = null;
        });
      }
    });
  }

  Widget _buildPersonalityDescription() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // A. ÏÑ±Í≤© ÏöîÏïΩ
        _buildSectionDivider(),
        const SizedBox(height: 30),

        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 20),
          child: const Text(
            'ÏÑ±Í≤© ÏöîÏïΩ',
            style: TextStyle(
              fontSize: 22,
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
        ),

        const SizedBox(height: 24),

        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(20),
          child: Text(
            _generatePersonalityDescription(),
            style: const TextStyle(
              fontSize: 17,
              height: 1.7,
              color: Colors.black,
              fontWeight: FontWeight.w500,
            ),
            textAlign: TextAlign.left,
          ),
        ),

        const SizedBox(height: 32),

        // B. ÎßêÌà¨ (Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò Ïä§ÌÉÄÏùº)
        _buildSectionDivider(),
        const SizedBox(height: 30),

        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 20),
          child: const Text(
            'ÎßêÌà¨ (Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò Ïä§ÌÉÄÏùº)',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
        ),

        const SizedBox(height: 20),
        _buildCommunicationSection(),

        const SizedBox(height: 32),

        // C. Îß§Î†•Ï†Å ÌäπÏÑ±
        _buildSectionDivider(),
        const SizedBox(height: 30),

        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 20),
          child: const Text(
            'Îß§Î†•Ï†Å ÌäπÏÑ±',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
        ),

        const SizedBox(height: 20),
        _buildAttractiveSection(),

        const SizedBox(height: 32),

        // D. Î™®ÏàúÏ†Å ÌäπÏÑ±
        _buildSectionDivider(),
        const SizedBox(height: 30),

        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 20),
          child: const Text(
            'Î™®ÏàúÏ†Å ÌäπÏÑ±',
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
        ),

        const SizedBox(height: 20),
        _buildContradictoryTraits(),
      ],
    );
  }

  Widget _buildSectionDivider() {
    return Container(width: double.infinity, height: 1, color: Colors.black);
  }

  Widget _buildTraitDescription() {
    String description = _generatePersonalityDescription();

    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(20),
      child: Text(
        description,
        style: const TextStyle(
          fontSize: 17,
          height: 1.7,
          color: Colors.black,
          fontWeight: FontWeight.w500,
        ),
        textAlign: TextAlign.left,
      ),
    );
  }

  Widget _buildCoreTraits() {
    List<String> traits = _generateCoreTraits();

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20),
      child: Column(
        children:
            traits.asMap().entries.map((entry) {
              int index = entry.key;
              String trait = entry.value;

              return Container(
                padding: const EdgeInsets.symmetric(vertical: 2),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      width: 20,
                      height: 20,
                      margin: const EdgeInsets.only(top: 1),
                      child: const Text(
                        '‚Ä¢',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Colors.black,
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Text(
                        trait,
                        style: const TextStyle(
                          fontSize: 16,
                          color: Colors.black,
                          height: 1.4,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ],
                ),
              );
            }).toList(),
      ),
    );
  }

  Widget _buildContradictoryTraits() {
    // üî• ÏµúÏö∞ÏÑ†: AIÍ∞Ä ÏÉùÏÑ±Ìïú Î™®ÏàúÏ†Å ÌäπÏÑ± ÏÇ¨Ïö©
    List<String> traits =
        widget.contradictions?.isNotEmpty == true
            ? widget.contradictions!
            : _generateContradictoryTraits();

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20),
      child: Column(
        children:
            traits.asMap().entries.map((entry) {
              int index = entry.key;
              String trait = entry.value;

              return Container(
                padding: const EdgeInsets.symmetric(vertical: 4),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      width: 6,
                      height: 6,
                      margin: const EdgeInsets.only(right: 12, top: 8),
                      decoration: BoxDecoration(
                        color: Colors.black.withOpacity(0.6),
                        borderRadius: BorderRadius.circular(3),
                      ),
                    ),
                    Expanded(
                      child: Text(
                        trait,
                        style: const TextStyle(
                          fontSize: 16,
                          height: 1.5,
                          color: Colors.black,
                        ),
                      ),
                    ),
                  ],
                ),
              );
            }).toList(),
      ),
    );
  }

  Widget _buildCharmingTraits() {
    // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ ÏÉùÏÑ±Îêú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
    List<String> traits =
        widget.attractiveFlaws?.isNotEmpty == true
            ? widget.attractiveFlaws!
            : _generateCharmingTraits();

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20),
      child: Column(
        children:
            traits.asMap().entries.map((entry) {
              int index = entry.key;
              String trait = entry.value;

              return Container(
                padding: const EdgeInsets.symmetric(vertical: 2),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      width: 20,
                      height: 20,
                      margin: const EdgeInsets.only(top: 1),
                      child: const Text(
                        '‚Ä¢',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Colors.black,
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Text(
                        trait,
                        style: const TextStyle(
                          fontSize: 16,
                          color: Colors.black,
                          height: 1.4,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ],
                ),
              );
            }).toList(),
      ),
    );
  }

  Widget _buildVoiceCharacteristics() {
    if (widget.realtimeSettings == null) return const SizedBox.shrink();

    final settings = widget.realtimeSettings!;
    List<String> characteristics = [];

    // üéµ Ï†ÄÏû•Îêú realtimeSettingsÏóêÏÑú Ï†ïÎ≥¥ Ï∂îÏ∂ú
    final voice = settings['voice'] ?? 'alloy';
    final voiceRationale = settings['voiceRationale'] ?? '';
    final emotionalTone = settings['emotionalTone'] ?? '';
    final speechRhythm = settings['speechRhythm'] ?? '';
    final interactionStyle = settings['interactionStyle'] ?? '';
    final pronunciation = settings['pronunciation'] ?? '';

    // ÏùåÏÑ± Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ Ï∂îÍ∞Ä
    if (voice.isNotEmpty && voiceRationale.isNotEmpty) {
      characteristics.add('üé§ ÏÑ†ÌÉùÎêú ÏùåÏÑ±: $voice ($voiceRationale)');
    }

    // Í∞êÏ†ï ÌÜ§ Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ Ï∂îÍ∞Ä
    if (emotionalTone.isNotEmpty) {
      characteristics.add('üé≠ Í∞êÏ†ï ÌëúÌòÑ: $emotionalTone');
    }

    // ÎßêÌïòÍ∏∞ Î¶¨Îì¨ Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ Ï∂îÍ∞Ä
    if (speechRhythm.isNotEmpty) {
      characteristics.add('üéµ ÎßêÌïòÍ∏∞ Î¶¨Îì¨: $speechRhythm');
    }

    // ÏÉÅÌò∏ÏûëÏö© Ïä§ÌÉÄÏùº Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ Ï∂îÍ∞Ä
    if (interactionStyle.isNotEmpty) {
      characteristics.add('üí¨ ÏÜåÌÜµ Î∞©Ïãù: $interactionStyle');
    }

    // Î∞úÏùå Ïä§ÌÉÄÏùº Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ Ï∂îÍ∞Ä
    if (pronunciation.isNotEmpty) {
      characteristics.add('üó£Ô∏è Î∞úÏùå ÌäπÏÑ±: $pronunciation');
    }

    // Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ Î©îÏãúÏßÄ
    if (characteristics.isEmpty) {
      characteristics.add('ÏùåÏÑ± ÌäπÏÑ± Ï†ïÎ≥¥Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
    }

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20),
      child: Column(
        children:
            characteristics.map((characteristic) {
              return Container(
                padding: const EdgeInsets.symmetric(vertical: 2),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      width: 20,
                      height: 20,
                      margin: const EdgeInsets.only(top: 1),
                      child: const Text(
                        '‚Ä¢',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: Colors.black,
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Text(
                        characteristic,
                        style: const TextStyle(
                          fontSize: 16,
                          color: Colors.black,
                          height: 1.4,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ],
                ),
              );
            }).toList(),
      ),
    );
  }

  Widget _buildCommunicationSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Ï†ÑÎ∞òÏ†ÅÏù∏ ÏÜåÌÜµ Î∞©Ïãù (communicationPrompt)
        if (widget.communicationPrompt?.isNotEmpty == true) ...[
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(20),
            child: Text(
              widget.communicationPrompt!,
              style: const TextStyle(
                fontSize: 16,
                height: 1.6,
                color: Colors.black,
              ),
              textAlign: TextAlign.left,
            ),
          ),
        ],

        // Ìè¥Î∞±: Ï†ïÎ≥¥Í∞Ä ÏóÜÏùÑ Îïå
        if (widget.communicationPrompt?.isEmpty ?? true) ...[
          const Padding(
            padding: EdgeInsets.symmetric(horizontal: 20),
            child: Text(
              'ÎßêÌà¨ Ï†ïÎ≥¥Í∞Ä ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey,
                fontStyle: FontStyle.italic,
              ),
            ),
          ),
        ],
      ],
    );
  }

  Widget _buildAttractiveSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Îß§Î†•Ï†Å Í≤∞Ìï® (attractiveFlaws)
        if (widget.attractiveFlaws?.isNotEmpty == true) ...[
          _buildAttractiveFlaws(),
        ],

        // Ìè¥Î∞±: Ï†ïÎ≥¥Í∞Ä ÏóÜÏùÑ Îïå
        if (widget.attractiveFlaws?.isEmpty ?? true) ...[
          const Padding(
            padding: EdgeInsets.symmetric(horizontal: 20),
            child: Text(
              'Îß§Î†•Ï†Å ÌäπÏÑ± Ï†ïÎ≥¥Í∞Ä ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.',
              style: TextStyle(
                fontSize: 16,
                color: Colors.grey,
                fontStyle: FontStyle.italic,
              ),
            ),
          ),
        ],
      ],
    );
  }

  Widget _buildAttractiveFlaws() {
    if (widget.attractiveFlaws?.isEmpty ?? true) {
      return const SizedBox.shrink();
    }

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20),
      child: Column(
        children:
            widget.attractiveFlaws!.asMap().entries.map((entry) {
              int index = entry.key;
              String flaw = entry.value;

              return Container(
                padding: const EdgeInsets.symmetric(vertical: 4),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      width: 6,
                      height: 6,
                      margin: const EdgeInsets.only(right: 12, top: 8),
                      decoration: BoxDecoration(
                        color: Colors.black.withOpacity(0.6),
                        borderRadius: BorderRadius.circular(3),
                      ),
                    ),
                    Expanded(
                      child: Text(
                        flaw,
                        style: const TextStyle(
                          fontSize: 16,
                          height: 1.5,
                          color: Colors.black,
                        ),
                      ),
                    ),
                  ],
                ),
              );
            }).toList(),
      ),
    );
  }

  Color _getAccentColor(int index) {
    final colors = [
      const Color(0xFFFF6B6B), // Îπ®Í∞ï
      const Color(0xFF4ECDC4), // ÌÑ∞ÏΩ∞Ïù¥Ï¶à
      const Color(0xFF45B7D1), // ÌååÎûë
      const Color(0xFF96CEB4), // ÎØºÌä∏
      const Color(0xFFFECE2F), // ÎÖ∏Îûë
      const Color(0xFFDDA0DD), // ÎùºÎ≤§Îçî
    ];
    return colors[index % colors.length];
  }

  String _getPersonalityDescription(String label) {
    switch (label) {
      case 'Ïò®Í∏∞':
        return 'Îî∞ÎúªÌï®Í≥º ÏπúÍ∑ºÌï®ÏùÑ\nÌëúÌòÑÌïòÎäî Ï†ïÎèÑ';
      case 'Îä•Î†•':
        return 'ÏóÖÎ¨¥ÎÇò Í≥ºÏ†úÎ•º\nÏ≤òÎ¶¨ÌïòÎäî Îä•Î†•';
      case 'Ïô∏Ìñ•ÏÑ±':
        return 'ÏÇ¨ÍµêÏ†ÅÏù¥Í≥†\nÌôúÎ∞úÌïú ÏÑ±Ìñ•';
      case 'Ï∞ΩÏùòÏÑ±':
        return 'ÎèÖÏ∞ΩÏ†ÅÏù¥Í≥†\nÏÉàÎ°úÏö¥ ÏïÑÏù¥ÎîîÏñ¥';
      case 'Ïú†Î®∏':
        return 'Ïû¨ÏπòÏûàÍ≥†\nÏú†Î®∏Îü¨Ïä§Ìïú Î©¥';
      case 'Ïã†Î¢∞ÏÑ±':
        return 'ÎØøÏùÑ Ïàò ÏûàÍ≥†\nÏùòÏßÄÌï† Ïàò ÏûàÎäî Ï†ïÎèÑ';
      default:
        return 'ÏÑ±Í≤© ÌäπÏÑ±';
    }
  }

  String _generatePersonalityDescription() {
    // üî• ÏµúÏö∞ÏÑ†: AIÍ∞Ä ÏÉùÏÑ±Ìïú ÏÑ±Í≤© ÏÑ§Î™Ö ÏÇ¨Ïö©
    if (widget.personalityDescription?.isNotEmpty == true) {
      return widget.personalityDescription!;
    }

    // üî• Ï∞®ÏÑ†: ÏÜåÌÜµ Ïä§ÌÉÄÏùº ÌîÑÎ°¨ÌîÑÌä∏ ÏÇ¨Ïö©
    if (widget.communicationPrompt?.isNotEmpty == true) {
      return widget.communicationPrompt!;
    }

    // üî• Ìè¥Î∞±: Í∏∞Ï°¥ Î°úÏßÅ ÏÇ¨Ïö©
    if (widget.warmth >= 70 && widget.extroversion >= 70) {
      return "Îî∞ÎúªÌïòÍ≥† ÌôúÎ∞úÌïú ÏÑ±Í≤©ÏúºÎ°ú, Ï£ºÎ≥Ä ÏÇ¨ÎûåÎì§ÏóêÍ≤å Í∏çÏ†ïÏ†ÅÏù∏ ÏóêÎÑàÏßÄÎ•º Ï†ÑÎã¨Ìï¥Ïöî. ÏÉàÎ°úÏö¥ ÏÇ¨ÎûåÎì§Í≥ºÎèÑ ÏâΩÍ≤å ÏπúÌï¥ÏßÄÎ©∞, Ìï≠ÏÉÅ Î∞ùÏùÄ Î∂ÑÏúÑÍ∏∞Î•º ÎßåÎì§Ïñ¥Í∞ÄÎäî Î∂ÑÏúÑÍ∏∞ Î©îÏù¥Ïª§ÏòàÏöî.";
    } else if (widget.warmth >= 70 && widget.extroversion < 40) {
      return "Îî∞ÎúªÌïòÏßÄÎßå Ï°∞Ïö©Ìïú ÏÑ±Í≤©ÏúºÎ°ú, ÍπäÏù¥ ÏûàÎäî ÎåÄÌôîÎ•º Ï¢ãÏïÑÌï¥Ïöî. ÏÜåÏàòÏùò ÏπúÍµ¨Îì§Í≥º ÏßÑÏÜîÌïú Í¥ÄÍ≥ÑÎ•º Îß∫Îäî Í≤ÉÏùÑ ÏÑ†Ìò∏ÌïòÎ©∞, ÏÉÅÎåÄÎ∞©Ïùò ÎßàÏùåÏùÑ ÏÑ∏Ïã¨ÌïòÍ≤å Î∞∞Î†§Ìï¥Ïöî.";
    } else if (widget.competence >= 70 && widget.warmth < 40) {
      return "Îä•Î†• ÏûàÍ≥† Ï≤¥Í≥ÑÏ†ÅÏù∏ ÏÑ±Í≤©ÏúºÎ°ú, ÏùºÏùÑ Ï†ïÌôïÌïòÍ≥† Ìö®Ïú®Ï†ÅÏúºÎ°ú Ï≤òÎ¶¨Ìï¥Ïöî. ÏôÑÎ≤ΩÏ£ºÏùòÏ†Å ÏÑ±Ìñ•Ïù¥ ÏûàÏñ¥ ÎÜíÏùÄ ÌíàÏßàÏùò Í≤∞Í≥ºÎ¨ºÏùÑ ÎßåÎì§Ïñ¥ÎÇ¥ÏßÄÎßå, ÎïåÎ°úÎäî ÏúµÌÜµÏÑ±Ïù¥ ÌïÑÏöîÌï† ÏàòÎèÑ ÏûàÏñ¥Ïöî.";
    } else if (widget.humour >= 80) {
      return "Ïú†Î®∏ Í∞êÍ∞ÅÏù¥ Îõ∞Ïñ¥ÎÇò Ï£ºÎ≥ÄÏùÑ Ìï≠ÏÉÅ ÏõÉÍ≤å ÎßåÎì§Ïñ¥Ïöî. Ïñ¥Îñ§ ÏÉÅÌô©ÏóêÏÑúÎèÑ Ïû¨Ïπò ÏûàÎäî ÎßêÎ°ú Î∂ÑÏúÑÍ∏∞Î•º Î∞ùÍ≤å ÎßåÎì§Î©∞, Ïä§Ìä∏Î†àÏä§Í∞Ä ÎßéÏùÄ ÏàúÍ∞ÑÏóêÎèÑ Í∏çÏ†ïÏ†ÅÏù∏ Í¥ÄÏ†êÏùÑ Ïú†ÏßÄÌï¥Ïöî.";
    } else if (widget.creativity >= 70) {
      return "Ï∞ΩÏùòÏ†ÅÏù¥Í≥† ÎèÖÏ∞ΩÏ†ÅÏù∏ ÏïÑÏù¥ÎîîÏñ¥Î•º Í∞ÄÏßÑ ÏÑ±Í≤©Ïù¥ÏóêÏöî. Í∏∞Ï°¥Ïùò ÌãÄÏóê ÏñΩÎß§Ïù¥ÏßÄ ÏïäÍ≥† ÏÉàÎ°úÏö¥ Î∞©ÏãùÏúºÎ°ú Î¨∏Ï†úÎ•º Ìï¥Í≤∞ÌïòÎ©∞, ÏòàÏà†Ï†Å Í∞êÍ∞ÅÎèÑ Îõ∞Ïñ¥ÎÇòÏöî.";
    } else {
      return "Í∑†Ìòï Ïû°Ìûå ÏÑ±Í≤©ÏúºÎ°ú, ÏÉÅÌô©Ïóê Îî∞Îùº Ïú†Ïó∞ÌïòÍ≤å ÎåÄÏ≤òÌï¥Ïöî. ÏïàÏ†ïÏ†ÅÏù¥Î©¥ÏÑúÎèÑ Ï†ÅÏùëÎ†•Ïù¥ Îõ∞Ïñ¥ÎÇò Îã§ÏñëÌïú ÌôòÍ≤ΩÏóêÏÑú ÏûêÏã†ÎßåÏùò Îß§Î†•ÏùÑ Î∞úÌúòÌï† Ïàò ÏûàÏñ¥Ïöî.";
    }
  }

  List<String> _generateCoreTraits() {
    // üî• ÏµúÏö∞ÏÑ†: AIÍ∞Ä ÏÉùÏÑ±Ìïú ÌïµÏã¨ ÌäπÏÑ± ÏÇ¨Ïö©
    if (widget.coreTraits?.isNotEmpty == true) {
      return widget.coreTraits!;
    }

    // üî• Ï∞®ÏÑ†: Í∏∞Ï°¥ Î°úÏßÅÏúºÎ°ú Ìè¥Î∞±
    List<String> traits = [];

    if (widget.warmth >= 60) {
      traits.add("Îî∞ÎúªÌïú Ïò®Í∏∞Î°ú Ï£ºÎ≥ÄÏùÑ Ìè¨Í∑ºÌïòÍ≤å ÎßåÎìúÎäî Îä•Î†•Ïù¥ Îõ∞Ïñ¥ÎÇòÏöî");
    }

    if (widget.competence >= 60) {
      traits.add("ÎÜíÏùÄ Îä•Î†•ÏπòÎ°ú Îß°ÏùÄ ÏóÖÎ¨¥Î•º ÏôÑÎ≤ΩÌïòÍ≤å Ï≤òÎ¶¨Ìï¥ÎÇ¥Ïöî");
    }

    if (widget.extroversion >= 60) {
      traits.add("Ïô∏Ìñ•Ï†Å ÏÑ±Í≤©ÏúºÎ°ú ÏÇ¨ÎûåÎì§Í≥ºÏùò ÏÜåÌÜµÏùÑ Ï¶êÍ≤®Ìï¥Ïöî");
    } else {
      traits.add("ÎÇ¥Ìñ•Ï†Å ÏÑ±Í≤©ÏúºÎ°ú ÍπäÏù¥ ÏûàÎäî ÏÇ¨Í≥†Î•º Ï¶êÍ≤®Ìï¥Ïöî");
    }

    if (widget.creativity >= 60) {
      traits.add("Ï∞ΩÏùòÏ†Å ÏÇ¨Í≥†Î°ú ÏÉàÎ°úÏö¥ ÏïÑÏù¥ÎîîÏñ¥Î•º Ï†úÏãúÌï¥Ïöî");
    }

    if (widget.humour >= 60) {
      traits.add("Ïú†Î®∏ Í∞êÍ∞ÅÏúºÎ°ú Ïñ¥Îñ§ ÏÉÅÌô©ÎèÑ Ï¶êÍ≤ÅÍ≤å ÎßåÎì§Ïñ¥Ïöî");
    }

    while (traits.length < 5) {
      traits.add("Í∑†Ìòï Ïû°Ìûå ÏÑ±Í≤©ÏúºÎ°ú Îã§ÏñëÌïú ÏÉÅÌô©Ïóê Ïûò Ï†ÅÏùëÌï¥Ïöî");
    }

    return traits.take(5).toList();
  }

  List<String> _generateContradictoryTraits() {
    List<String> traits = [];

    if (widget.warmth >= 70 && widget.competence <= 40) {
      traits.add("Îî∞ÎúªÌïòÏßÄÎßå ÎïåÎ°úÎäî ÏôÑÎ≤ΩÌï®ÏùÑ Ï∂îÍµ¨ÌïòÏßÄ ÏïäÏïÑ ÏïÑÏâ¨ÏõåÏöî");
    }

    if (widget.competence >= 70 && widget.warmth <= 40) {
      traits.add("Îä•Î†•ÏùÄ Îõ∞Ïñ¥ÎÇòÏßÄÎßå Í∞êÏ†ï ÌëúÌòÑÏù¥ ÏÑúÌà¥ ÎïåÍ∞Ä ÏûàÏñ¥Ïöî");
    }

    if (widget.extroversion >= 70 && widget.reliability <= 40) {
      traits.add("ÌôúÎ∞úÌïòÏßÄÎßå Í∞ÄÎÅî ÏïΩÏÜçÏùÑ ÍπúÎπ°Ìï† ÎïåÍ∞Ä ÏûàÏñ¥Ïöî");
    }

    if (widget.creativity >= 70 && widget.reliability >= 70) {
      traits.add("Ï∞ΩÏùòÏ†ÅÏù¥Î©¥ÏÑúÎèÑ Ïã†Î¢∞Ìï† Ïàò ÏûàÏñ¥ ÎèÖÌäπÌïú Îß§Î†•Ïù¥ ÏûàÏñ¥Ïöî");
    }

    if (traits.isEmpty) {
      traits.addAll([
        "ÏôÑÎ≤ΩÌïòÏßÄ ÏïäÍ∏∞ ÎïåÎ¨∏Ïóê ÎçîÏö± Ïù∏Í∞ÑÏ†ÅÏù¥Í≥† Îß§Î†•Ï†ÅÏù¥ÏóêÏöî",
        "Í∞ïÏ†êÍ≥º ÏïΩÏ†êÏù¥ Í≥µÏ°¥Ìï¥ÏÑú ÎçîÏö± Î≥µÌï©Ï†ÅÏù∏ Îß§Î†•ÏùÑ Í∞ÄÏ†∏Ïöî",
      ]);
    }

    return traits.take(2).toList();
  }

  List<String> _generateCharmingTraits() {
    List<String> traits = [];

    if (widget.warmth >= 70) {
      traits.add("ÏßÑÏã¨ Ïñ¥Î¶∞ Í¥ÄÏã¨Í≥º Î∞∞Î†§Î°ú ÏÉÅÎåÄÎ∞©ÏùÑ Ìé∏ÏïàÌïòÍ≤å ÎßåÎì§Ïñ¥Ï§òÏöî");
    }

    if (widget.competence >= 70) {
      traits.add("Îß°ÏùÄ ÏùºÏùÄ ÎÅùÍπåÏßÄ Ï±ÖÏûÑÏßÄÎäî ÎØøÏùåÏßÅÌïú Î™®ÏäµÏùÑ Î≥¥Ïó¨Ï§òÏöî");
    }

    if (widget.extroversion >= 70) {
      traits.add("ÏóêÎÑàÏßÄ ÎÑòÏπòÎäî Î™®ÏäµÏúºÎ°ú Ï£ºÎ≥ÄÏùÑ ÌôúÍ∏∞Ï∞®Í≤å ÎßåÎì§Ïñ¥Ïöî");
    } else if (widget.extroversion < 40) {
      traits.add("Ï°∞Ïö©ÌïòÏßÄÎßå ÍπäÏù¥ ÏûàÎäî ÎåÄÌôîÎ°ú ÌäπÎ≥ÑÌïú ÏàúÍ∞ÑÏùÑ ÎßåÎì§Ïñ¥Ïöî");
    }

    if (widget.humour >= 80) {
      traits.add("Ï†ÅÏ†àÌïú ÌÉÄÏù¥Î∞çÏùò Ïú†Î®∏Î°ú Ïñ¥ÏÉâÌïú Î∂ÑÏúÑÍ∏∞ÎèÑ Í∏àÏÑ∏ ÌíÄÏñ¥Î≤ÑÎ†§Ïöî");
    }

    if (widget.creativity >= 60) {
      traits.add("ÏòàÏÉÅÏπò Î™ªÌïú ÎèÖÌäπÌïú ÏïÑÏù¥ÎîîÏñ¥Î°ú ÏÉàÎ°úÏö¥ Ïû¨ÎØ∏Î•º ÏÑ†ÏÇ¨Ìï¥Ïöî");
    }

    if (widget.reliability >= 60) {
      traits.add("ÏïΩÏÜçÏùÄ Íº≠ ÏßÄÌÇ§Í≥†, ÎπÑÎ∞ÄÎèÑ Ïûò ÏßÄÏºúÏ£ºÎäî Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî ÏπúÍµ¨ÏòàÏöî");
    }

    if (traits.isEmpty) {
      traits.addAll([
        "ÏûêÏã†ÎßåÏùò ÎèÖÌäπÌïú Îß§Î†•ÏúºÎ°ú ÏÇ¨ÎûåÎì§ÏóêÍ≤å Í∏∞ÏñµÏóê ÎÇ®ÏïÑÏöî",
        "ÏÉÅÌô©Ïóê ÎßûÍ≤å Ïú†Ïó∞ÌïòÍ≤å ÎåÄÏ≤òÌïòÎäî ÏßÄÌòúÎ°úÏö¥ Î™®ÏäµÏùÑ Î≥¥Ïó¨Ï§òÏöî",
        "Í≤∏ÏÜêÌïòÎ©¥ÏÑúÎèÑ ÏûêÏã†Í∞ê ÏûàÎäî Í∑†Ìòï Ïû°Ìûå ÏÑ±Í≤©Ïù¥ÏóêÏöî",
      ]);
    }

    return traits.take(3).toList();
  }
}

class RadarChartPainter extends CustomPainter {
  final List<double> values;
  final List<String> labels;

  RadarChartPainter({required this.values, required this.labels});

  @override
  void paint(Canvas canvas, Size size) {
    final center = Offset(size.width / 2, size.height / 2);
    final radius = math.min(size.width, size.height) / 2 - 60;
    final sides = values.length;

    _drawGridLines(canvas, center, radius, sides);
    _drawDataArea(canvas, center, radius, sides);
    _drawLabels(canvas, center, radius, sides);
  }

  void _drawGridLines(Canvas canvas, Offset center, double radius, int sides) {
    final gridPaint =
        Paint()
          ..color = Colors.black.withOpacity(0.3)
          ..style = PaintingStyle.stroke
          ..strokeWidth = 1.5;

    for (int i = 1; i <= 5; i++) {
      final currentRadius = (radius / 5) * i;
      canvas.drawCircle(center, currentRadius, gridPaint);
    }

    final axisPaint =
        Paint()
          ..color = Colors.black.withOpacity(0.5)
          ..style = PaintingStyle.stroke
          ..strokeWidth = 2;

    for (int i = 0; i < sides; i++) {
      final angle = (2 * math.pi / sides) * i - math.pi / 2;
      final endPoint = Offset(
        center.dx + radius * math.cos(angle),
        center.dy + radius * math.sin(angle),
      );
      canvas.drawLine(center, endPoint, axisPaint);
    }
  }

  void _drawDataArea(Canvas canvas, Offset center, double radius, int sides) {
    final dataPath = Path();
    final dataPaint =
        Paint()
          ..color = Colors.black.withOpacity(0.2)
          ..style = PaintingStyle.fill;

    final borderPaint =
        Paint()
          ..color = Colors.black
          ..style = PaintingStyle.stroke
          ..strokeWidth = 3;

    for (int i = 0; i < sides; i++) {
      final angle = (2 * math.pi / sides) * i - math.pi / 2;
      final value = values[i] / 100;
      final pointRadius = radius * value;

      final point = Offset(
        center.dx + pointRadius * math.cos(angle),
        center.dy + pointRadius * math.sin(angle),
      );

      if (i == 0) {
        dataPath.moveTo(point.dx, point.dy);
      } else {
        dataPath.lineTo(point.dx, point.dy);
      }
    }
    dataPath.close();

    canvas.drawPath(dataPath, dataPaint);
    canvas.drawPath(dataPath, borderPaint);

    final pointPaint =
        Paint()
          ..color = Colors.white
          ..style = PaintingStyle.fill;

    final pointBorderPaint =
        Paint()
          ..color = Colors.black
          ..style = PaintingStyle.fill;

    for (int i = 0; i < sides; i++) {
      final angle = (2 * math.pi / sides) * i - math.pi / 2;
      final value = values[i] / 100;
      final pointRadius = radius * value;

      final point = Offset(
        center.dx + pointRadius * math.cos(angle),
        center.dy + pointRadius * math.sin(angle),
      );

      canvas.drawCircle(point, 8, pointBorderPaint);
      canvas.drawCircle(point, 6, pointPaint);
    }
  }

  void _drawLabels(Canvas canvas, Offset center, double radius, int sides) {
    for (int i = 0; i < sides; i++) {
      final angle = (2 * math.pi / sides) * i - math.pi / 2;
      final labelRadius = radius + 40;

      final labelPosition = Offset(
        center.dx + labelRadius * math.cos(angle),
        center.dy + labelRadius * math.sin(angle),
      );

      final textPainter = TextPainter(
        text: TextSpan(
          text: labels[i],
          style: const TextStyle(
            color: Colors.black,
            fontSize: 15,
            fontWeight: FontWeight.bold,
          ),
        ),
        textDirection: TextDirection.ltr,
      );

      textPainter.layout();

      final offset = Offset(
        labelPosition.dx - textPainter.width / 2,
        labelPosition.dy - textPainter.height / 2,
      );

      textPainter.paint(canvas, offset);
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}

extension ColorExtension on Color {
  Color darken([int percent = 10]) {
    assert(1 <= percent && percent <= 100);
    var f = 1 - percent / 100;
    return Color.fromARGB(
      alpha,
      (red * f).round(),
      (green * f).round(),
      (blue * f).round(),
    );
  }
}
